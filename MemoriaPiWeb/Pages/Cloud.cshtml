@page
@model MemoriaPiWeb.Pages.CloudModel
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@{
    ViewData["Title"] = "Cloud Speicher";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<input type="file" id="file-upload-input" multiple style="display: none;" />
<input type="hidden" id="RequestVerificationToken" name="RequestVerificationToken" value="@Xsrf.GetAndStoreTokens(HttpContext).RequestToken" />

<div class="content-full-width">
    <div class="cloud-wrapper">
        <aside class="cloud-sidebar">
            <div class="dropdown">
                <button class="btn btn-new shadow-sm d-flex align-items-center justify-content-center w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="fas fa-plus"></i>
                    <span class="ms-2">Neu</span>
                </button>
                <ul class="dropdown-menu dropdown-menu-dark">
                    <li><a class="dropdown-item" href="#" id="upload-file-button"><i class="fas fa-file-upload me-2"></i>Datei hochladen</a></li>
                    <li><a class="dropdown-item" href="#" id="create-folder-button"><i class="fas fa-folder-plus me-2"></i>Neuer Ordner</a></li>
                </ul>
            </div>

            <ul class="cloud-sidebar-nav">
                <li><a href="#" class="active"><i class="fas fa-hdd"></i> Meine Ablage</a></li>
                <li><a href="#"><i class="fas fa-users"></i> Für mich freigegeben</a></li>
                <li><a href="#"><i class="fas fa-star"></i> Markiert</a></li>
                <li><a href="#"><i class="fas fa-trash"></i> Papierkorb</a></li>
            </ul>

            <div class="storage-status">
                <p class="mb-2"><i class="fas fa-cloud me-2"></i>Speicher</p>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" style="width: @Model.UsedPercentage%;" aria-valuenow="@Model.UsedPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                </div>
                <small class="mt-2 d-block">@Model.UsedStorageGB GB von @Model.TotalStorageGB GB belegt</small>
            </div>
        </aside>

        <main class="cloud-main">
            <div class="cloud-main-header">
                <h2>Meine Ablage</h2>
                <div class="view-options">
                    <label for="icon-size-selector" class="me-2">Anzeige:</label>
                    <select id="icon-size-selector" class="form-select form-select-sm form-select-themed" style="width: auto;">
                        <option value="small">Klein</option>
                        <option value="medium" selected>Mittel</option>
                        <option value="large">Groß</option>
                    </select>
                </div>
            </div>

            <div id="file-grid-container" class="file-grid">
                @if (Model.CloudItems.Any())
                {
                    @foreach (var item in Model.CloudItems)
                    {
                        <div class="file-item-wrapper">
                            <div class="file-item-menu dropdown">
                                <button class="btn btn-sm btn-menu" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-dark">
                                    <li><a class="dropdown-item rename-btn" href="#" data-name="@item.Name" data-type="@(item.IsFolder ? "folder" : "file")">Umbenennen</a></li>
                                    <li><a class="dropdown-item delete-btn" href="#" data-name="@item.Name" data-type="@(item.IsFolder ? "folder" : "file")">Löschen</a></li>
                                </ul>
                            </div>

                            @if (item.IsFolder)
                            {
                                <a href="#" class="file-item">
                                    <div class="file-icon"><i class="@item.IconClass"></i></div>
                                    <div class="file-name">@item.Name</div>
                                </a>
                            }
                            else
                            {
                                <a href="@item.FilePath" download="@item.Name" class="file-item">
                                    <div class="file-icon"><i class="@item.IconClass"></i></div>
                                    <div class="file-name">@item.Name</div>
                                    <div class="file-size">@item.FileSize</div>
                                </a>
                            }
                        </div>
                    }
                }
                else
                {
                    <p class="text-white-50 mt-4">Keine Dateien oder Ordner gefunden.</p>
                }
            </div>

            <div id="drop-zone">
                <i class="fas fa-cloud-upload-alt"></i>
                <p>Dateien hierher ziehen, um sie hochzuladen</p>
            </div>
        </main>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            const requestToken = document.getElementById('RequestVerificationToken').value;

            // -------- HILFSFUNKTIONEN --------
            async function uploadFiles(files) {
                if (files.length === 0) return;
                const formData = new FormData();
                for (const file of files) {
                    formData.append('files', file);
                }
                try {
                    const response = await fetch('/api/Files/Upload', {
                        method: 'POST',
                        body: formData,
                        headers: { 'RequestVerificationToken': requestToken }
                    });
                    const result = await response.json();
                    if (response.ok) {
                        alert(result.message);
                        location.reload();
                    } else {
                        alert(`Fehler: ${result.message || 'Der Upload ist fehlgeschlagen.'}`);
                    }
                } catch (error) {
                    alert('Ein unerwarteter Upload-Fehler ist aufgetreten.');
                }
            }

            async function sendFileAction(url, body) {
                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': requestToken
                        },
                        body: JSON.stringify(body)
                    });
                    if (response.ok) {
                        const result = await response.json();
                        alert(result.message);
                        location.reload();
                    } else {
                        let errorMessage = `Fehler: ${response.status} ${response.statusText}`;
                        try { const errorResult = await response.json(); if (errorResult && errorResult.message) errorMessage = `Fehler: ${errorResult.message}`; }
                        catch (e) { }
                        alert(errorMessage);
                    }
                } catch (error) {
                    alert('Ein unerwarteter Fehler bei der Aktion ist aufgetreten.');
                }
            }

            // -------- EVENT LISTENERS --------
            // 1. Upload & Ordner erstellen
            document.getElementById('upload-file-button')?.addEventListener('click', (e) => { e.preventDefault(); document.getElementById('file-upload-input').click(); });
            document.getElementById('file-upload-input')?.addEventListener('change', (e) => { uploadFiles(e.target.files); });

            const dropZone = document.getElementById('drop-zone');
            if(dropZone) {
                ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(e => dropZone.addEventListener(e, (ev) => { ev.preventDefault(); ev.stopPropagation(); }));
                ['dragenter', 'dragover'].forEach(e => dropZone.addEventListener(e, () => dropZone.classList.add('highlight')));
                ['dragleave', 'drop'].forEach(e => dropZone.addEventListener(e, () => dropZone.classList.remove('highlight')));
                dropZone.addEventListener('drop', (e) => { uploadFiles(e.dataTransfer.files); });
            }

            document.getElementById('create-folder-button')?.addEventListener('click', function(e) {
                e.preventDefault();
                const folderName = prompt("Geben Sie den Namen für den neuen Ordner ein:");
                if (folderName) {
                    sendFileAction('/api/Files/CreateFolder', { folderName: folderName });
                }
            });

            // 2. Datei-/Ordner-Aktionen
            document.querySelectorAll('.delete-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault(); e.stopPropagation();
                    const name = this.dataset.name;
                    const type = this.dataset.type;
                    if (confirm(`Möchten Sie ${type === 'folder' ? 'den Ordner' : 'die Datei'} "${name}" wirklich löschen?`)) {
                        const url = type === 'folder' ? '/api/Files/DeleteFolder' : '/api/Files/Delete';
                        const body = type === 'folder' ? { folderName: name } : { fileName: name };
                        sendFileAction(url, body);
                    }
                });
            });

            document.querySelectorAll('.rename-btn').forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault(); e.stopPropagation();
                    const oldName = this.dataset.name;
                    const type = this.dataset.type;
                    const newName = prompt(`Geben Sie einen neuen Namen für "${oldName}" ein:`, oldName);
                    if (newName && newName !== oldName) {
                        const url = type === 'folder' ? '/api/Files/RenameFolder' : '/api/Files/Rename';
                        const body = type === 'folder' ? { folderName: oldName, newFolderName: newName } : { fileName: oldName, newFileName: newName };
                        sendFileAction(url, body);
                    }
                });
            });

            // 3. Icon-Größen-Dropdown
            const selector = document.getElementById('icon-size-selector');
            if (selector) {
                const fileGrid = document.getElementById('file-grid-container');
                function updateIconSize(size) {
                    fileGrid.classList.remove('size-small', 'size-medium', 'size-large');
                    fileGrid.classList.add(`size-${size}`);
                }
                selector.addEventListener('change', function () { updateIconSize(this.value); });
                updateIconSize(selector.value);
            }
        });
    </script>
}